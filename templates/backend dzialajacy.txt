from flask import Flask, render_template, request, jsonify
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__, template_folder="templates")
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///warehouse.db"
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
db = SQLAlchemy(app)

# ðŸ“Œ Model kategorii
class Category(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)

# ðŸ“Œ Model produktu
class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    quantity = db.Column(db.Integer, nullable=False)
    category_id = db.Column(db.Integer, db.ForeignKey('category.id'), nullable=False)
    category = db.relationship("Category", backref=db.backref("products", lazy=True))

# ðŸ“Œ Tworzenie bazy danych
with app.app_context():
    db.create_all()

# ðŸ“Œ Strona gÅ‚Ã³wna
@app.route("/")
def index():
    return render_template("index.html")

# ðŸ“Œ Pobieranie kategorii
@app.route("/categories", methods=["GET"])
def get_categories():
    categories = Category.query.all()
    return jsonify([{"id": c.id, "name": c.name} for c in categories])

# ðŸ“Œ Pobieranie produktÃ³w
@app.route("/products", methods=["GET"])
def get_products():
    products = Product.query.all()
    return jsonify([
        {"id": p.id, "name": p.name, "quantity": p.quantity, "category": {"id": p.category.id, "name": p.category.name} if p.category else None}
        for p in products
    ])

# ðŸ“Œ Dodawanie nowej kategorii
@app.route("/category", methods=["POST"])
def add_category():
    data = request.json
    new_category = Category(name=data["name"])
    db.session.add(new_category)
    db.session.commit()
    return jsonify({"message": "Category added successfully!"})

# ðŸ“Œ Edycja kategorii
@app.route("/category/<int:category_id>", methods=["PUT"])
def update_category(category_id):
    data = request.json
    category = Category.query.get_or_404(category_id)
    category.name = data["name"]
    db.session.commit()
    return jsonify({"message": "Category updated successfully!"})

# ðŸ“Œ UsuniÄ™cie kategorii
@app.route("/category/<int:category_id>", methods=["DELETE"])
def delete_category(category_id):
    category = Category.query.get_or_404(category_id)
    db.session.delete(category)
    db.session.commit()
    return jsonify({"message": "Category deleted successfully!"})

# ðŸ“Œ Dodawanie nowego produktu
@app.route("/product", methods=["POST"])
def add_product():
    data = request.json
    new_product = Product(name=data["name"], quantity=data["quantity"], category_id=data["category_id"])
    db.session.add(new_product)
    db.session.commit()
    return jsonify({"message": "Product added successfully!"})

# ðŸ“Œ Edycja produktu
@app.route("/product/<int:product_id>", methods=["PUT"])
def update_product(product_id):
    data = request.json
    product = Product.query.get_or_404(product_id)
    product.name = data["name"]
    product.quantity = data["quantity"]
    product.category_id = data["category_id"]
    db.session.commit()
    return jsonify({"message": "Product updated successfully!"})

# ðŸ“Œ UsuniÄ™cie produktu
@app.route("/product/<int:product_id>", methods=["DELETE"])
def delete_product(product_id):
    product = Product.query.get_or_404(product_id)
    db.session.delete(product)
    db.session.commit()
    return jsonify({"message": "Product deleted successfully!"})

# ðŸ“Œ Uruchomienie aplikacji Flask
if __name__ == "__main__":
    app.run(debug=True)
    